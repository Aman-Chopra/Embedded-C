The above terminal window clearly shows how we are trying the evaluate the expression based on the rules of BODMAS. First the user enters an expression. The expression can contain digit of any length and the user can enter the combination of all the operators supported by our calculator in any order and be sure that the answer would be write. Like in the example above, the user has entered nested brackets with log ‘l’ and power. Th expression is evaluated taking into consideration the precedence of operators.
First the infix expression entered by user is converted into a new infix expression. The reason for this is that if we convert the normal infix into postfix, it would not work for multi-digit numbers, to make it work for multi-digit number, we need to encode the multi-digit number entered by user into a single character like in this case, 25 is encoded to 0, 5 is encoded to 1 and so on. We have achieved this using hashmap, maintaining a map of key value pairs.
This new infix is converted into postfix expression as shown in the figure above. During the postfix evaluation the value of the encoded character again to its actual multi-digit value again using key value pair and pushed into a floating point array to get the final answer in decimal.
The final answer is converted into a character array using sprintf to print the answer in LCD.
